doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Style Standards

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Standards
        h3 in Style
      
      section
        h2 Standard
          em  (noun)
        ol
          li an accepted or approved example of something against which others are judged or measured
          li (often plural) a principle of propriety, honesty, and integrity: "she has no standards"
          li a level of excellence or quality: "a low standard of living"
          li (...)

      section
        h2 If Nothing Else. Please, Let there be Standards.
        
      section
        h1 CSS Rules
        h2 Your standards should...
      
      section
        h2 promote the same format and structure
        pre
          code.language-css.
            /* Bad boy */
            .selector-1[attr=value],
              .selector-2{
              background-color: white;
                color: black;
              margin:10px;
              padding:
                5px 10px;

              }
          code.language-css.
            /* Good girl */
            .selector-1[attr="value"],
            .selector-2 {
              background-color: white;
              color: black;
              margin: 10px;
              padding: 5px 10px;
            }
      
      section
        h2 reflect best practices
        pre
          code.language-css.
            /* Bad boy */
            .selector {
              background: #ffddcc;
              line-height: 1.2rem;
              margin: 0px !important;
            }
          code.language-css.
            /* Good girl */
            .selector {
              background-color: #fdc;
              line-height: 1.2;
              margin: 0;
            }

      section
        h2 define how to handle Vendor Prefixes
        ul
          li Use PostCSS' Autoprefixer or similar
          li Alternatively, if you have a preprocessor, use mixins
          li Last mesure, define browsers and create a table with required prefixes
      
      section
        h2 guide the usage of Media Queries
        pre
          code.language-css.
            .select-1 {
              /* Declarations */
            }
            @media (min-width: 800px) {
              .select-1 {
                /* Declarations */
              }
            }
          code.language-css.
            /*
            Don't shy away of
            max-with rules
            */
            @media (max-width: 480px) {
              .mobile-prevent-scroll {
                /* Declarations */
              }
            }
      
      section
        h2 prohibit the use of 
          code.language-css.
            @import
        ul
          li Performance sucks
          li With preprocessors it's ok, they compile those rules
          li In CSS, use build tools to generate a single CSS file
      
      section
        h1 Naming Conventions
      
      section
        h2 Choose a structure that gives meaning to both markup and CSS
        pre
          code.language-css.
            /* Bad boy */
            .sf {
              /* Declarations */
            }
          code.language-css.
            /* Good girl */
            .search-form {
              /* Declarations */
            }
          
      section
        h2 Declare special classes
        h3 for specific uses with the help of "name spaces"
      
      section
        h2 State Classes
        pre
          code.language-css.
            /* Bad */
            .is-error {
              border-color: red;
              color: red;
            }
          code.language-css.
            /* Good */
            .selector.is-error {
              border-color: red;
              color: red;
            }
          
      section
        h2 Provide separation of purpose
        pre
          code.language-css.
            /* Great! But not here... */
            .js-search-form__submit {
              border: 1px solid red;
            }
            
      section
        h1 Documentation
        
      section
        h2 Go further when you NEED to
        pre
          code.language-css.
            /* This is something to look out for. */
            .selector {
              border: 1px solid red;
            }
            
      section
        h2 Go further when you HAVE to
        pre
          code.language-css.
            .selector {
              /* Because of some DARN vendor code! */
              background-color: green !important;
            }
          
      section
        h2 Structure when and how to make shit obvious!
        h3 Use something like KSS or your very own brand of structure
      
      section
        pre
          code.language-css.
            /*
            A button suitable for giving stars to someone.

            :hover             - Subtle hover highlight.
            .stars-given       - A star.
            .stars-given:hover - Subtle hover star.
            .disabled          - Dims stuff.

            Styleguide 2.1.3.
            */
            a.button.star{
              ...
            }
            a.button.star.stars-given{
              ...
            }
            a.button.star.disabled{
              ...
            }
        
      section
        h2.bullet What do Standards give us?
        ul
          li The benefit of a head start<sup>*</sup>
          li Offer a base point<sup>*</sup>
          li They touch every bit of code
          li They make many sound like One
          li They offer easy access for every newcomer
          li They offer easy access to "old" code

      section
        h2 So Standards are good...
      
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Hell, Mandatory!
      
      section
        h2 And now what?
        ul.bullet
          li Where do I start?
          li Which is the way to go?
          
      section
        h2 You make your own way!
      
      section
        h2 My advice is...
        ul
          li There is no one way of having/making Standards
          li.strike You can start from scratch (cof... cof...)
          li You <strong>should</strong> start from the bountiful resources
          li Make the first step, it's not like it'll be set in stone
          li Involve you team (if you have one)
          li Share your rule set (great for teamless folks)
          li Make mistakes and...
      
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Evolve!

      section
        
      section
        h2 Challenges
        ul.bullet
          li Integrating in New/Old projects
          li Extending and evolving your Standards
          li Keeping up with Standards
          
      section
        h1 Thank you!
        h3 Standards at <em>log</em><br>
          a(href="https://github.com/log-oscon/Standards", target="_blank") https://github.com/log-oscon/Standards
        h3 This presentation<br>
          a(href="https://github.com/xipasduarte/style-standards", target="_blank") https://github.com/xipasduarte/style-standards
        small Ari
          img(src="images/xipasduarte.jpg", alt="", class="my-kitty-face")

    script(src='build/build.js')
